# Generated by Django 3.2.7 on 2021-10-06 15:02

from django.db import migrations


def forward_create_receipt_number_seq_function(apps, schema_editor):
    schema_editor.execute('''
        CREATE OR REPLACE FUNCTION create_receipt_number_seq() RETURNS TRIGGER AS
        $$
        DECLARE
            seq     text;
        BEGIN
            seq := 'receipt_number_seq_' || NEW.instance_id || '_' || NEW.id;
            IF NOT EXISTS(SELECT 0 FROM pg_class where relname = seq)
            THEN
                EXECUTE 'CREATE SEQUENCE ' || seq || ' OWNED BY las_liabilitiestype.id';
            END IF;
            RETURN NULL;
        END
        $$ LANGUAGE 'plpgsql';
    ''')


def backward_create_receipt_number_seq_function(apps, schema_editor):
    schema_editor.execute('drop function create_receipt_number_seq() cascade;')


def forward_create_receipt_number_seq_trigger(apps, schema_editor):
    schema_editor.execute('''
        CREATE TRIGGER tr_ai_create_receipt_number_seq
        AFTER INSERT OR UPDATE ON las_liabilitiestype
        FOR EACH ROW EXECUTE PROCEDURE create_receipt_number_seq();
    ''')


def backward_create_receipt_number_seq_trigger(apps, schema_editor):
    schema_editor.execute('DROP TRIGGER IF EXISTS tr_ai_create_receipt_number_seq ON las_liabilitiestype;')


def forward_generate_receipt_number_function(apps, schema_editor):
    schema_editor.execute('''
        CREATE OR REPLACE FUNCTION generate_receipt_number() RETURNS TRIGGER
            LANGUAGE plpgsql
        AS $$
        DECLARE
            inst_id        int8;
            seq            text;
            sv             int8;
            receipt_number text;
        BEGIN
            IF NEW.receipt_number IS NULL OR NEW.receipt_number = ''
            THEN
                SELECT instance_id INTO inst_id from auth_user where id = NEW.user_id;
                seq := 'receipt_number_seq_' || inst_id || '_' || NEW.liabilities_type_id;
                sv := NEXTVAL(seq);

                receipt_number := lpad(inst_id::text, 4, '0') || '-' || lpad(NEW.liabilities_type_id::text, 4, '0') || '-' ||
                                  lpad(sv::text, GREATEST(length(sv::text), 5), '0');
                NEW.receipt_number := receipt_number;
            END IF;
            RETURN NEW;
        END;
        $$;
    ''')


def backward_generate_receipt_number_function(apps, schema_editor):
    schema_editor.execute('drop function generate_receipt_number() cascade;')


def forward_generate_receipt_number_trigger(apps, schema_editor):
    schema_editor.execute('''
        CREATE TRIGGER tr_bi_generate_receipt_number
        BEFORE INSERT ON las_accumulationregister
        FOR EACH ROW EXECUTE PROCEDURE generate_receipt_number();
    ''')


def delete_generate_receipt_number_trigger(apps, schema_editor):
    schema_editor.execute('DROP TRIGGER IF EXISTS tr_bi_generate_receipt_number ON las_accumulationregister;')


class Migration(migrations.Migration):
    dependencies = [
        ('las', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(forward_create_receipt_number_seq_function, backward_create_receipt_number_seq_function),
        migrations.RunPython(forward_create_receipt_number_seq_trigger, backward_create_receipt_number_seq_trigger),
        migrations.RunPython(forward_generate_receipt_number_function, backward_generate_receipt_number_function),
        migrations.RunPython(forward_generate_receipt_number_trigger, delete_generate_receipt_number_trigger),
    ]
