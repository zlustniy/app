# Generated by Django 3.2.7 on 2021-10-06 15:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.contrib.auth.hashers import make_password
from django.db import migrations, models


def create_initial_user(apps, schema_editor):
    User = apps.get_registered_model('las', 'User')
    User.objects.all().delete()
    User.objects.create(
        username='root',
        email='pivovarov_av@srvhub.ru',
        password=make_password('root'),
        is_superuser=True,
        is_staff=True
    )


def delete_initial_user(apps, schema_editor):
    User = apps.get_registered_model('las', 'User')
    User.objects.filter(username='root').delete()


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Пользователь: система-клиент API',
                'verbose_name_plural': 'Пользователи: системы-клиенты API',
                'db_table': 'auth_user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время редактирования')),
                ('name', models.CharField(max_length=50, verbose_name='Наименование вида действий')),
            ],
            options={
                'verbose_name': 'Вид действия',
                'verbose_name_plural': 'Виды действий',
            },
        ),
        migrations.CreateModel(
            name='Instance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время редактирования')),
                ('name', models.CharField(max_length=50, verbose_name='Наименование инстанции')),
            ],
            options={
                'verbose_name': 'Инстанция',
                'verbose_name_plural': 'Инстанции',
            },
        ),
        migrations.CreateModel(
            name='SubjectAccumulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время редактирования')),
                ('ogrn',
                 models.CharField(db_index=True, max_length=15, unique=True, verbose_name='ОГРН (ОГРНИП) клиента')),
                ('name', models.CharField(max_length=200, verbose_name='Наименование клиента')),
            ],
            options={
                'verbose_name': 'Субъект накопления',
                'verbose_name_plural': 'Субъекты накопления',
            },
        ),
        migrations.CreateModel(
            name='LiabilitiesType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время редактирования')),
                ('name', models.CharField(max_length=500, verbose_name='Наименование вида обязательств')),
                ('postfix',
                 models.CharField(max_length=32, verbose_name='Постфикс (идентификатор для прямого EVAL-доступа)')),
                ('is_default', models.BooleanField(default=False, verbose_name='Основной вид обязательств')),
                ('type_running',
                 models.CharField(choices=[('internal', 'Внутренний'), ('external', 'Внешний')], max_length=100,
                                  verbose_name='Тип ведения учёта')),
                ('instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='las.instance',
                                               verbose_name='Идентификатор инстанции')),
            ],
            options={
                'verbose_name': 'Вид обязательств',
                'verbose_name_plural': 'Виды обязательств',
            },
        ),
        migrations.CreateModel(
            name='ExternalActionProcess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время редактирования')),
                ('url',
                 models.CharField(blank=True, max_length=200, null=True, verbose_name='Ссылка вызова внешнего метода')),
                ('action_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='las.actiontype',
                                                  verbose_name='Вид действия')),
                ('liabilities_type',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='las.liabilitiestype',
                                   verbose_name='Вид обязательства')),
            ],
            options={
                'verbose_name': 'Выполнение внешнего действия',
                'verbose_name_plural': 'Выполнения внешних действий',
            },
        ),
        migrations.CreateModel(
            name='AccumulationRegister',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('changed_at', models.DateTimeField(auto_now=True, verbose_name='Дата и время редактирования')),
                ('receipt_number', models.CharField(db_index=True, max_length=100, verbose_name='Номер квитанции')),
                ('amount_record', models.DecimalField(decimal_places=2, max_digits=17,
                                                      verbose_name='Приращение количества согласно данной записи регистра')),
                ('amount_total', models.DecimalField(decimal_places=2, max_digits=17,
                                                     verbose_name='Суммарное количество по субъекту обязательств в разрезе вида обязательств')),
                ('liabilities_type',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='las.liabilitiestype',
                                   verbose_name='Идентификатор вида обязательств')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='las.subjectaccumulation',
                                              verbose_name='Идентификатор субъекта накопления')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL,
                                           verbose_name='Система-клиент, поставившая на учет')),
            ],
            options={
                'verbose_name': 'Накопление в регистре накопления',
                'verbose_name_plural': 'Накопления в регистре накопления',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='instance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='las.instance', verbose_name='Подучетная инстанция'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                         related_name='user_set', related_query_name='user', to='auth.Permission',
                                         verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='liabilitiestype',
            constraint=models.UniqueConstraint(fields=('postfix', 'instance'), name='unique'),
        ),

        migrations.RunPython(create_initial_user, delete_initial_user),
    ]
